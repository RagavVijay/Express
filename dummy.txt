app.post('/check-login', (req, res) => {
    const { email, password } = req.body;

    // Check if email is already registered and if password is correct
    const emailAlreadyRegistered = checkEmailAlreadyRegistered(email);
    const passwordCorrect = checkPasswordCorrect(email, password);

    const errors = {};

    if (!emailAlreadyRegistered) {
        errors.email = 'Email is not registered.';
    }

    if (!passwordCorrect) {
        errors.password = 'Incorrect password.';
    }

    if (Object.keys(errors).length > 0) {
        return res.status(400).json({ errors });
    }

    // If no errors, proceed with login
    // ...
});


//html
<form id="login-form" action="/login" method="post">
    <!-- Your login form fields -->
    
    <div id="email-error" class="error"></div>
    <div id="password-error" class="error"></div>
</form>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        $('#login-form').on('submit', function(event) {
            event.preventDefault();

            const formData = $(this).serialize();

            $.ajax({
                type: 'POST',
                url: '/check-login',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    if (response.errors) {
                        $('#email-error').text(response.errors.email || '');
                        $('#password-error').text(response.errors.password || '');
                    } else {
                        // No errors, proceed with login
                        window.location.href = '/dashboard';
                    }
                }
            });
        });
    });
</script>

//fetch
<form id="login-form" action="/login" method="post">
    <!-- Your login form fields -->
    
    <div id="email-error" class="error"></div>
    <div id="password-error" class="error"></div>
</form>

<form id="login-form" action="/login" method="post">
    <!-- Your login form fields -->
    
    <div id="email-error" class="error"></div>
    <div id="password-error" class="error"></div>
</form>
Create a Fetch Route in Express.js:

Create a new route in your Express.js application to handle Fetch requests for login validation. This route will send the error messages as JSON responses.

javascript
Copy code
app.post('/check-login', (req, res) => {
    const { email, password } = req.body;

    // Check if email is already registered and if the password is correct
    const emailAlreadyRegistered = checkEmailAlreadyRegistered(email);
    const passwordCorrect = checkPasswordCorrect(email, password);

    const errors = {};

    if (!emailAlreadyRegistered) {
        errors.email = 'Email is not registered.';
    }

    if (!passwordCorrect) {
        errors.password = 'Incorrect password.';
    }

    if (Object.keys(errors).length > 0) {
        return res.status(400).json({ errors });
    }

    // If no errors, proceed with login
    // ...
});

<script>
    document.getElementById('login-form').addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(event.target);

        try {
            const response = await fetch('/check-login', {
                method: 'POST',
                body: formData,
            });

            if (response.ok) {
                // No errors, proceed with login
                window.location.href = '/dashboard';
            } else {
                const data = await response.json();
                if (data.errors) {
                    document.getElementById('email-error').textContent = data.errors.email || '';
                    document.getElementById('password-error').textContent = data.errors.password || '';
                }
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
</script>

//otp
const otpGenerator = require('otp-generator');
const otp = otpGenerator.generate(6, { digits: true, alphabets: false, upperCase: false, specialChars: false });

<!DOCTYPE html>
<html>
<head>
    <title>OTP Validation</title>
</head>
<body>
    <h1>OTP Validation</h1>
    <form action="/send-otp" method="post">
        <label for="email">Email:</label>
        <input type="email" name="email" id="email" required>
        <button type="submit">Send OTP</button>
    </form>

    <form action="/verify-otp" method="post">
        <label for="otp">Enter OTP:</label>
        <input type="text" name="otp" id="otp" required>
        <input type="hidden" name="email" value="<%= email %>">
        <button type="submit">Verify OTP</button>
    </form>
</body>
</html>

const express = require('express');
const nodemailer = require('nodemailer');
const otpGenerator = require('otp-generator');

const app = express();
const port = 3000;

app.set('view engine', 'ejs');

// Configure Nodemailer
const transporter = nodemailer.createTransport({
    // Your email service configuration here
});

// Store OTPs in a map (you can use a database for production)
const otpMap = new Map();

// Routes
app.get('/', (req, res) => {
    res.render('index');
});

app.post('/send-otp', (req, res) => {
    // Generate an OTP
    const otp = otpGenerator.generate(6, { digits: true, alphabets: false, upperCase: false, specialChars: false });

    // Store OTP associated with the user's email (you can use a database for production)
    otpMap.set(req.body.email, otp);

    // Send the OTP via email
    const mailOptions = {
        from: 'your_email@gmail.com',
        to: req.body.email,
        subject: 'OTP Verification',
        text: `Your OTP is: ${otp}`,
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            console.log(error);
            res.status(500).send('Failed to send OTP');
        } else {
            console.log('Email sent: ' + info.response);
            res.send('OTP sent to your email. Check your inbox.');
        }
    });
});

app.post('/verify-otp', (req, res) => {
    const email = req.body.email;
    const enteredOTP = req.body.otp;

    // Retrieve the stored OTP for the user
    const storedOTP = otpMap.get(email);

    if (enteredOTP === storedOTP) {
        res.send('OTP is valid. You can proceed.');
    } else {
        res.status(400).send('Invalid OTP. Please try again.');
    }
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});


//otp mailOptions//


const express = require('express');
const nodemailer = require('nodemailer');
const otpGenerator = require('otp-generator');

const app = express();
const port = 3000;

app.set('view engine', 'ejs');

// Configure Nodemailer
const transporter = nodemailer.createTransport({
    // Your email service configuration here
});

// Store OTPs in a map (you can use a database for production)
const otpMap = new Map();

// Routes
app.get('/', (req, res) => {
    res.render('login');
});

app.post('/login', (req, res) => {
    // Perform the login validation here
    // If login is successful, generate and send OTP via email
    const otp = otpGenerator.generate(6, { digits: true, alphabets: false, upperCase: false, specialChars: false });

    // Store OTP associated with the user's email (you can use a database for production)
    otpMap.set(req.body.email, otp);

    // Send the OTP via email
    const mailOptions = {
        from: 'your_email@gmail.com',
        to: req.body.email,
        subject: 'OTP Verification',
        text: `Your OTP is: ${otp}`,
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            console.log(error);
            res.status(500).send('Failed to send OTP');
        } else {
            console.log('Email sent: ' + info.response);
            res.redirect('/verify-otp');
        }
    });
});

app.get('/verify-otp', (req, res) => {
    res.render('otp-verification');
});

app.post('/verify-otp', (req, res) => {
    const email = req.body.email;
    const enteredOTP = req.body.otp;

    // Retrieve the stored OTP for the user
    const storedOTP = otpMap.get(email);

    if (enteredOTP === storedOTP) {
        res.send('OTP is valid. You can proceed.');
    } else {
        res.status(400).send('Invalid OTP. Please try again.');
    }
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form action="/login" method="post">
        <label for="email">Email:</label>
        <input type="email" name="email" id="email" required>
        <button type="submit">Login</button>
    </form>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
    <title>OTP Verification</title>
</head>
<body>
    <h1>OTP Verification</h1>
    <form action="/verify-otp" method="post">
        <label for="otp">Enter OTP:</label>
        <input type="text" name="otp" id="otp" required>
        <input type="hidden" name="email" value="<%= email %>">
        <button type="submit">Verify OTP</button>
    </form>
</body>
</html>





///////
    try {
        await OTPModel.create({ email: req.body.email, otp });
    } catch (error) {
        console.error('Failed to store OTP in the database:', error);
        return res.status(500).send('Failed to create OTP');
    }

    app.post('/verify-otp', async (req, res) => {
    const email = req.body.email;
    const enteredOTP = req.body.otp;

    // Retrieve the stored OTP from the database
    try {
        const otpDocument = await OTPModel.findOne({ email }).sort({ createdAt: -1 });
        if (otpDocument && otpDocument.otp === enteredOTP) {
            res.send('OTP is valid. You can proceed.');
            return;
        }
    } catch (error) {
        console.error('Failed to retrieve OTP from the database:', error);
    }

    res.status(400).send('Invalid OTP. Please try again.');
});



///redirect///
app.get('/page1', (req, res) => {
    req.session.myVariable = 'Hello from page 1';
    res.redirect('/page2');
});

app.get('/page2', (req, res) => {
    const myVariable = req.session.myVariable;
    res.send(`Received data: ${myVariable}`);
});

app.get('/page1', (req, res) => {
    const myVariable = 'Hello from page 1';
    res.redirect(`/page2?data=${myVariable}`);
});

app.get('/page2', (req, res) => {
    const myVariable = req.query.data;
    res.send(`Received data: ${myVariable}`);
});



///////captcha////
<form action="/login" method="post">
    <!-- Your other login form fields -->
    <div class="g-recaptcha" data-sitekey="YOUR_SITE_KEY"></div>
    <button type="submit">Login</button>
</form>

const express = require('express');
const app = express();
const recaptcha = require('express-recaptcha');

// Set your reCAPTCHA keys
recaptcha.init('YOUR_SITE_KEY', 'YOUR_SECRET_KEY');

// Use the reCAPTCHA middleware on the login route
app.post('/login', recaptcha.middleware.verify, (req, res) => {
    // Check if reCAPTCHA verification passed
    if (!req.recaptcha.error) {
        // CAPTCHA was verified; continue with login processing
        // ...
        res.send('Login successful.');
    } else {
        // CAPTCHA verification failed; handle the error
        res.send('CAPTCHA verification failed. Please try again.');
    }
});






